generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Stream {
  id       String         @id @default(cuid())
  slug     String         @unique
  name     String
  private  Boolean
  joinCode String
  posts    StreamPost[]
  members  StreamMember[]
}

model StreamPost {
  id       String @id @default(cuid())
  title    String
  content  String @db.Text

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  streamId String
  stream   Stream @relation(fields: [streamId], references: [id])

  userStatus StreamPostOnUser[]

  @@index([streamId])
  @@index([authorId])
}

model StreamMember {
  userId     String
  streamId   String
  permission Permission

  user     User   @relation(fields: [userId], references: [id])
  stream   Stream @relation(fields: [streamId], references: [id])

  @@id([userId, streamId])
  @@index([userId])
  @@index([streamId])
}

// Allows user to mark a post as "Complete" or add notes to a post
model StreamPostOnUser {
  userId       String
  postId String

  user User       @relation(fields: [userId], references: [id])
  post StreamPost @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@index([postId])
}

enum Permission {
  OWNER
  ADMIN
  MEMBER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  posts    StreamPost[]
  streams  StreamMember[]
  statuses StreamPostOnUser[]
}

